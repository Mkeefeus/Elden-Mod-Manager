import { Mod } from 'types';
import { CreateModPathFromName, errToString } from '../utils/utilities';
import store from './db/init';
import { logger } from '../utils/mainLogger';
import { writeFileSync } from 'fs';
import { getModEnginePath } from './db/api';
import { app } from 'electron';

const { debug, error } = logger;

const GenerateTomlString = (mods: Mod[]) => {
  const cwd = process.cwd();
  let dllString = '';
  let fileString = '';
  mods.forEach((mod) => {
    if (!mod.enabled) return;
    const path = `${cwd}\\mods\\${CreateModPathFromName(mod.name)}${mod.dllFile ? '\\' + mod.dllFile : ''}`;

    // keep double backslashes for toml
    const escapedPath = path.replace(/\\/g, '\\\\');

    const modString = mod.dllFile
      ? `"${escapedPath}",\n   `
      : `{ name = "${mod.name}", path = "${escapedPath}", enabled = true },\n   `;

    mod.dllFile ? (dllString += modString) : (fileString += modString);
  });
  // cleanup strings
  dllString = dllString.slice(0, -5);
  fileString = fileString.slice(0, -5);

  return `# Elden Ring Mod Engine Configuration created by Elden Mod Manger. Do not edit this file unless you know what you're doing.
[modengine]
external_dlls = [${dllString !== '' ? `\n   ${dllString}\n` : ''}]
[extension.mod_loader]
enabled = true
mods = [${fileString !== '' ? `\n   ${fileString}\n` : ''}]`;
};

export const writeTomlFile = (mods: Mod[]) => {
  try {
    const tomlString = GenerateTomlString(mods);
    const modEnginePath = getModEnginePath();
    const modEngineFolder = modEnginePath?.split('\\').slice(0, -1).join('\\');
    debug('Writing toml file');
    writeFileSync(`${modEngineFolder}\\config_eldenring.toml`, tomlString);
    debug('Toml file written');
  } catch (err) {
    const msg = `An error occured while writing toml file: ${errToString(err)}`;
    error(msg);
    throw new Error(msg);
  }
};

const startModsListener = () => {
  const unsubscribe = store.onDidChange('mods', (mods) => {
    if (!mods) return;
    writeTomlFile(mods);
  });

  app.on('before-quit', () => {
    unsubscribe();
  });
};

export default startModsListener;
